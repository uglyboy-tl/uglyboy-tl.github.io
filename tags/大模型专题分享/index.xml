<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>大模型专题分享 on 拾柒读库</title>
    <link>https://blog.uglyboy.cn/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%B8%93%E9%A2%98%E5%88%86%E4%BA%AB/</link>
    <description>Recent content in 大模型专题分享 on 拾柒读库</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 23 Nov 2023 06:35:17 +0800</lastBuildDate>
    <atom:link href="https://blog.uglyboy.cn/tags/%E5%A4%A7%E6%A8%A1%E5%9E%8B%E4%B8%93%E9%A2%98%E5%88%86%E4%BA%AB/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>RAG 技术</title>
      <link>https://blog.uglyboy.cn/slides/2023/11/23/rag-%E6%8A%80%E6%9C%AF/</link>
      <pubDate>Thu, 23 Nov 2023 06:35:17 +0800</pubDate>
      <guid>https://blog.uglyboy.cn/slides/2023/11/23/rag-%E6%8A%80%E6%9C%AF/</guid>
      <description># RAG 技术 --- - 检索增强的生成系统（Retrieve Augment Generation）简称 RAG。 - 原理是在大语言模型的基础上，辅助检索技术，让大语言模型</description>
      <content:encoded><![CDATA[<div class="reveal" style="height:50vh;max-height:540px;">
  <div class="slides">
    <section data-markdown>
      <textarea data-template>
      
# RAG 技术

---

- 检索增强的生成系统（Retrieve Augment Generation）简称 RAG。
- 原理是在大语言模型的基础上，辅助检索技术，让大语言模型能够获得与用户问题相关的更多上下文信息，使得的大语言模型可以：
  - 降低幻觉出现概率
  - 适应垂直场景应用
  - 弥补数据实时性不足

---

### 一个典型 RAG 系统的架构

&lt;img style=&#34;margin: 0 auto;&#34; src=&#34;https://s2.loli.net/2023/11/26/UcTsI8xJVdMFfRt.jpg&#34;&gt;

---

### RAG 系统的核心技术要素

- 文档导入
- 文档切分
- 文档向量化
- 向量数据库选型
- 检索算法
- 文档排序
- Prompt 生成
- $\dots$
---

市面上大部分的关于 RAG 的介绍都是类似上面的逻辑进行的，然后就顺利的将 *某一种 RAG 的方法* 变成了 *通用 RAG 的框架*，从而让我们迷失了 RAG 的真正价值。

---

## 从定义出发，RAG 就是

## 检索 &#43; 生成

---
- Chat With Documents 属于 RAG
- 用户对话中保留历史记忆 属于 RAG
- 网页搜索 &#43; LLM 属于 RAG
- 自动调用 API 接口获取信息 属于 RAG
- 调用数据库获取信息 属于 RAG
- $\dots$
- **上面各种方法一起使用也属于 RAG**

---

## RAG 究竟意味着什么？

&gt; 为什么我们要使用检索

---

- 人类行为的两种模式：主动获取信息（功利动机行为）和被动获取信息（共情动机行为）；
  - 通常在产品上，我们可以用 *Save time* 和 *Kill time* 的模式来区分
- 主动获取信息的手段被称为信息检索。
  - RAG 更标准的说法应当是有了 LLM 能力加持的信息检索。
---

## LLM 很难独立完成检索

---
- 最核心的问题是，对于如何引导大模型按照我们的意愿生成内容，**我们无法直接控制，我们只能通过增加上下文的方式来影响生成结果**。
  - 对于大模型来说，它会如何回答一个问题依赖的不是训练框架，而是训练数据。
  - 我们无法直接控制大模型的生成结果，但是我们可以通过增加上下文的方式来影响生成结果。
  - 一个问题，我们可以提供相关的上下文，然后利用大模型的泛化能力，让它生成我们想要的答案。

---

&lt;img class=&#34;r-stretch&#34; style=&#34;margin: 0 auto;&#34; src=&#34;https://s2.loli.net/2023/11/27/B1NkImf2eKrZl7J.png&#34;&gt;
---

- 大模型的“记忆力”并不可靠，不同的上下文会引导出怎样的结果是不确定的。
  - 仅靠大模型，是无法取消幻觉的。
- 如果 RAG 做得不好，可能带来的是负面效果。
---

## RAG 的核心
## 如何用好检索

---

## 检索的发展史

1. 图书馆的索引式检索（Yahoo 等目录网页）；
2. 关键词召回（传统搜索）；
3. 向量相似度（个性化推荐）；
4. 自然语言回答问题（大模型）；

&gt; 这些方法不是递进的，而是并列的。

---

## 新概念下的 RAG 框架

---
1. 对用户问题分类，判断使用哪些检索器；
2. 根据用户问题，找到最适合的检索器检索方式（Query、SQL、API 调用等）；
3. 召回的结果，判断与用户问题的相关性，进行合理过滤或改进；
4. 用适合的方式组织召回结果，提供给 LLM 进行汇总并回答用户问题；
5. （可选）判断是否很好的回答了用户的问题，是否需要重新再来一遍（这其实就进化成 Agent 了）。

---
- 可以使用不同的 LLM 来执行不同的任务，这样就可以在计算速度和资源上得到极大的节约，并针对特定问题取得更好的效果。
- 检索器的各种优化技术都值得使用：
  - 包括传统的关键词搜索（QP）
  - 向量检索只是其中的一种手段；同时向量检索也应当额外建立适合的索引。
  - 知识图谱是有效的检索器之一。
  - 利用好结构化信息（数据库 或 API）。
- 好的检索器依赖好的数据。
---

# Q & A

---

#### 如果我们有一些私有的数据，如何让大模型能够利用这些私有数据呢？

-----
- 通过微调的方式，将私有数据加入到大模型的训练数据中。
- 通过检索的方式，将私有数据加入到大模型的上下文中。
- **以上方法都用**

---

#### 怎样才能更好的提升 RAG 的效果？

-----

最核心的要素其实是：找到更优质的数据（准确、结构化）

---

#### 产品和开发要深入研究 Prompt Engineering 吗？

-----

永远都不要这样做，这件事交给 SFT

- 概念对比
- Let’s think step by step
- 通用优化 Prompt 的 Prompt
- function call
- Self RAG
- 让模型来学习如何 Prompt Engineering
      </textarea>
    </section>
  </div>
</div>
<script type="text/javascript">
  var ctx = document.getElementsByClassName("post-content")[0];
  ctx.removeAttribute("class");
</script>
]]></content:encoded>
    </item>
    <item>
      <title>大语言模型原理分享</title>
      <link>https://blog.uglyboy.cn/slides/2023/11/21/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%88%86%E4%BA%AB/</link>
      <pubDate>Tue, 21 Nov 2023 01:45:37 +0800</pubDate>
      <guid>https://blog.uglyboy.cn/slides/2023/11/21/%E5%A4%A7%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9E%8B%E5%8E%9F%E7%90%86%E5%88%86%E4%BA%AB/</guid>
      <description># 大语言模型&amp;lt;br&amp;gt;原理分享 --- ## 什么是大语言模型？ --- 当我说了很多话之后，我马上要说 $\Box$ --- ## 数学公式描述 ----- $w_1, w_2,\dots, w_{N}$ 是一个单词序列，这个</description>
      <content:encoded><![CDATA[<div class="reveal" style="height:50vh;max-height:540px;">
  <div class="slides">
    <section data-markdown>
      <textarea data-template>
      
# 大语言模型&lt;br&gt;原理分享
---

## 什么是大语言模型？
---

当我说了很多话之后，我马上要说 $\Box$

---

## 数学公式描述
-----
$w_1, w_2,\dots, w_{N}$ 是一个单词序列，这个序列的概率分布是：

$$
p(w_{1},w_{2},\dots,w_{N})=\prod^N_{i=1}p(w_{i}|w_{1},w_{2},\dots,w_{i})
$$

---

## 大语言模型能做什么？

---

- 大模型能记住它看到过的一切信息。
- 大模型对于已经看到过的信息，有一定的泛化能力（有限度的推广）。

---

### 大模型能达到怎样的泛化能力？

&gt; 大模型可以涌现出智能吗？

---

## 大语言模型不能做什么？

---
1. 大模型无法判别一个 $\\\{[0|1]^*\\\}$ 序列中是否有奇数个 $1$。
2. 给定 $n$ 大模型无法生成 $(aa)^n$。
3. 大模型无法判定 $\\\{0^n\\\#1^n\\\}$ 形式的序列。
4. 大模型无法执行加法运算。
5. $\dots$

---

大语言模型没有，也不可能具有推理能力。

&gt; 大语言模型只是记住了足够多的别人的推理，然后用类比的方法将这些推理泛化了而已。

---

## 大语言模型是如何将信息泛化的？

---

- 通过相似度计算来进行泛化，然后通过概率分布来进行选择。
    1. 粗略的可以如下理解：可以用同义词替代的都能被泛化。
    2. 这种泛化的替代能力是可以保留相对位置信息的（例如一道数学题中的数字变了，它可以泛化到后续的解题过程中，都用新数字替代原来的数字）。
    3. 在训练样本充分的情况下，可以跨语言进行同义词泛化。

---

# Q & A
      </textarea>
    </section>
  </div>
</div>
<script type="text/javascript">
  var ctx = document.getElementsByClassName("post-content")[0];
  ctx.removeAttribute("class");
</script>
]]></content:encoded>
    </item>
  </channel>
</rss>
